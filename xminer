from asyncio import sleep
from .. import loader, utils
import asyncio
from telethon.tl.types import Message, ChatAdminRights
from telethon import functions, TelegramClient, errors
from ..inline.types import InlineCall
import inspect

@loader.tds
class MevoMiner(loader.Module):
    '''–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ø–∞–Ω–∏–µ –≤ –±–æ—Ç–µ MineEvo'''
    strings = {
        "name" : "MevoMiner"
    }
    async def client_ready(self,client,db):
        self.bb = False
        s = self.get('dly')
        if s == None:
            self.set('dly', 1.0)
        s = self.get('mm')
        if s == None:
            self.set('mm', False)
        s = self.get('ag')
        if s == None:
            self.set('ag', False)
        s = self.get('as')
        if s == None:
            self.set('as', False)
        s = self.get('fw')
        if s == None:
            self.set('fw', False)

    @loader.command()
    async def kop(self, message):
        '''- –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–ø–∞–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–ø–∞–Ω–∏—è [–∑–Ω–∞—á–µ–Ω–∏–µ]'''
        args = utils.get_args_split_by(message, " ")
        cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name}'
        if args:
            cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name} {utils.get_args_raw(message)}'
        else:
            # –õ–æ–≥–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–ø–∞–Ω–∏—è
            self.set('mm', not self.get('mm'))
            if self.get('mm'):
                await self.client.send_message(message.chat_id, "‚õè <b>–ö–æ–ø–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</b>")
                await message.delete()
            else:
                await self.client.send_message(message.chat_id, "‚õè <b>–ö–æ–ø–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ</b>")
                await message.delete()

        # –õ–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –∫–æ–ø–∞–Ω–∏—è
        if len(args) == 1:
            zz = args[0]
            try:
                zz = float(zz)
                self.set('dly', zz)
                await utils.answer(message, f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!\n–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {zz}</b> ")
            except ValueError:
                await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–û—à–∏–±–∫–∞ | {cmd}\n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏!</b>")
        elif len(args) > 1:
            await utils.answer(message, f'<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | {cmd}\n–í—ã —É–∫–∞–∑–∞–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞')

        # –¶–∏–∫–ª –∫–æ–ø–∞–Ω–∏—è
        while self.get('mm'):
            dly = self.get('dly')
            try:
                await self.client.send_message("@mine_evo_bot", "–∫–æ–ø")
                await asyncio.sleep(dly)
            except errors.FloodWaitError as f:
                self.set('mm', False)
                se = f.seconds 
                see = se + 5
                if self.get('fw'):
                    await asyncio.sleep(see)
                    await self.mmm(message)
    @loader.watcher()
    async def bosses_fw(self,message):
        dly = self.get('dly')
        
        if self.get('as'):
            if self.get('mm'):
                if message.chat_id == 5522271758 and "üî∂ –¢—ã –≤—ã–±—Ä–∞–ª –±–æ—Å—Å–∞" in message.raw_text:
                    self.bb = True
                    await self.mmm(message)
        if self.get('ag'):
            if self.bb:
                if message.chat_id == 5522271758 and "–¥–ª—è –∞—Ç–∞–∫–∏ –≤—ã–±–µ—Ä–∏ –±–æ—Å—Å–∞" in message.raw_text:
                    self.bb = False
                    await asyncio.sleep(dly)
                    await self.mmm(message)
    @loader.command(alias = 'msc')
    async def emdly(self,message: Message):
        '''- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–ø–∞–Ω–∏—è [–∑–Ω–∞—á–µ–Ω–∏–µ]'''
        args = utils.get_args_split_by(message, " ")
        cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name}'
        if args:
            cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name} {utils.get_args_raw(message)}'
        else:
            await utils.answer(message, f'<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | {cmd}\n–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
        if len(args) > 1:
            await utils.answer(message, f'<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | {cmd}\n–í—ã —É–∫–∞–∑–∞–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞')
        zz = args[0]    
        try:
            zz = float(zz)
            self.set('dly',zz)
            await utils.answer(message, f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!\n–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {zz}</b> ")
        except ValueError:
            await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–û—à–∏–±–∫–∞ | {cmd}\n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏!</b>")


    @loader.command()
    async def emcfg(self,message):
        '''- –ö–æ–Ω—Ñ–∏–≥ –º–æ–¥—É–ª—è MevoMiner'''
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        if self.get('mm'):
            dpm = '–í–∫–ª—é—á–µ–Ω–æ'
        else:
            dpm = '–í—ã–∫–ª—é—á–µ–Ω–æ'
        
        await self.inline.form(
            text=f"<emoji document_id=5981043230160981261>‚è±</emoji> <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è:</b> <code>{self.get('dly')}</code>\n‚õè <b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> <i>{dpm}</i>\n<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}",
            message=message,
            reply_markup=[
                [
                    {
                        'text' : '‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è ',
                        'callback' : self.mdlym,
                    },
                    {
                        'text' : '‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        'callback' : self.idd,
                    },
                ],
                [
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def mdlym(self,call:InlineCall):
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        if self.get('mm'):
            dpm = '–í–∫–ª—é—á–µ–Ω–æ'
        else:
            dpm = '–í—ã–∫–ª—é—á–µ–Ω–æ'
        await call.edit(
            text=f"<emoji document_id=5981043230160981261>‚è±</emoji> <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è:</b> <code>{self.get('dly')}</code>\n‚õè <b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> <i>{dpm}</i>\n<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}\n\n<i><emoji document_id=5452069934089641166>‚ùì</emoji> –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–ø–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ:\n</i><code>.emdly [–∑–∞–¥–µ—Ä–∂–∫–∞]</code>",
            reply_markup=[
                [
                    {
                        'text' : '‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è ',
                        'callback' : self.mdlym,
                    },
                    {
                        'text' : '‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        'callback' : self.idd,
                    },
                ],
                [
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def iback(self,call:InlineCall):
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        if self.get('mm'):
            dpm = '–í–∫–ª—é—á–µ–Ω–æ'
        else:
            dpm = '–í—ã–∫–ª—é—á–µ–Ω–æ'

        await call.edit(
            text=f"<emoji document_id=5981043230160981261>‚è±</emoji> <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è:</b> <code>{self.get('dly')}</code>\n‚õè <b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> <i>{dpm}</i>\n<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}",
            reply_markup=[
                [
                    {
                        'text' : '‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è ',
                        'callback' : self.mdlym,
                    },
                    {
                        'text' : '‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        'callback' : self.idd,
                    },
                ],
                [
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def idd(self,call:InlineCall):
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def ibg(self,call:InlineCall):
        self.set('ag', not self.get('ag'))
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def ibs(self,call:InlineCall):
        self.set('as', not self.get('as'))
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def ifs(self,call:InlineCall):
        self.set('fw', not self.get('fw'))
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
         
